<?php

namespace MultiShip\Tests\Services;


use MultiShip\Tests\BaseTestCase;

use SoapHeader;
use MultiShip\Configuration;
use MultiShip\Services\Soap;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-15 at 10:22:52.
 *
 * @covers MultiShip\Services\Soap
 */
class SoapTest extends BaseTestCase
{
    /**
     * @var Soap
     */
    protected $object;

    protected function setUp()
    {
        $this->object = new Soap();
        $this->object->setWsdl( "../local/path/to/schema/wsdl/carrier/filename.wsdl" );
        $body = array(
            'test'    => 'body',
            'nest'    => array(
                'test' => 'body'
            ),
            'integer' => 12,
            'string'  => 'multiship'
        );
        $this->object->setBody( $body );
    }

    /**
     * @covers \MultiShip\Services\Soap::getClient
     * @expectedException \MultiShip\Exceptions\MultiShipException
     */
    public function testGetClientNoWsdl()
    {
        $this->object->setWsdl( '' );

        $this->object->getClient();
    }

    /**
     * @covers \MultiShip\Services\Soap::getClient
     */
    public function testGetClient()
    {
        $this->object->setWsdl( $this->getFixture( 'Wsdl/Test.wsdl', false ) );

        $this->assertNotNull( $this->object->getClient() );
        $this->assertInstanceOf( '\SoapClient', $this->object->getClient() );
    }

    /**
     * @covers \MultiShip\Services\Soap::setWsdl
     */
    public function testSetWsdl()
    {
        $this->object->setWsdl( "../some/path/to/a/schema/wsdl/filename.wsdl" );

        $this->assertNotNull( $this->object->getWsdl() );
//        $this->assertEquals( "../some/path/to/a/schema/wsdl/filename.wsdl", $this->object->getWsdl() );
    }

    /**
     * @covers \MultiShip\Services\Soap::getWsdl
     */
    public function testGetWsdl()
    {
        $this->assertNotNull( $this->object->getWsdl() );
//        $this->assertEquals( "../local/path/to/schema/wsdl/carrier/filename.wsdl", $this->object->getWsdl() );
    }

    /**
     * @covers \MultiShip\Services\Soap::setOptions
     */
    public function testSetOptions()
    {
        $options = array(
            'soap_version' => 'SOAP_1_2',
            'trace'        => 0
        );

        $this->object->setOptions( $options );

        $this->assertNotNull( $this->object->getOptions() );
        $this->assertEquals( $options, $this->object->getOptions() );
    }

    /**
     * @covers \MultiShip\Services\Soap::getOptions
     */
    public function testGetOptions()
    {
        $this->assertNotNull( $this->object->getOptions() );
        $this->assertEquals( array( 'soap_version' => 'SOAP_1_1', 'trace' => 1 ), $this->object->getOptions() );
    }

    /**
     * @covers \MultiShip\Services\Soap::setHeader
     * @covers \MultiShip\Services\Soap::getHeader
     */
    public function testSetHeader()
    {
        $soapHeader = new SoapHeader(
            'http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0',
            'UPSSecurity',
            array(
                 'UsernameToken'      => array(
                     'Username' => 'me',
                     'Password' => 'secr3tPass'
                 ),
                 'ServiceAccessToken' => array(
                     'AccessLicenseNumber' => 'none'
                 )
            )
        );
        $this->object->setHeader( $soapHeader );

        $this->assertNotNull( $this->object->getHeader() );
        $this->assertInstanceOf( '\SoapHeader', $this->object->getHeader() );
        $this->assertEquals( $soapHeader, $this->object->getHeader() );
    }

    /**
     * @covers \MultiShip\Services\Soap::setBody
     */
    public function testSetBody()
    {
        $body = array(
            'new'     => 'body',
            'nest'    => array(
                'nest' => array(
                    'body'
                )
            ),
            'integer' => 18,
            'string'  => 'multiship'
        );

        $this->object->setBody( $body );

        $this->assertNotNull( $this->object->getBody() );
        $this->assertEquals( $body, $this->object->getBody() );
    }

    /**
     * @covers \MultiShip\Services\Soap::getBody
     */
    public function testGetBody()
    {
        $body = array(
            'test'    => 'body',
            'nest'    => array(
                'test' => 'body'
            ),
            'integer' => 12,
            'string'  => 'multiship'
        );

        $this->assertNotNull( $this->object->getBody() );
        $this->assertEquals( $body, $this->object->getBody() );
    }

    /**
     * @covers \MultiShip\Services\Soap::call
     */
    public function testCall()
    {
        $testResponse = json_decode( $this->getFixture( 'FedEx/RateResponse.json' ), true );

        $client = $this->getMock( 'SoapClient', array( '__setLocation', '__setSoapHeaders', '__soapCall' ), array(), 'TestSoapClient', false );
        $client->expects( $this->any() )->method( '__soapCall' )->will( $this->returnValue( $testResponse ) );

        $this->object->setClient( $client );
        $config = new Configuration();

        $this->assertNotNull( $this->object->call( $config, 'testing' ) );
        $this->assertEquals( $testResponse, $this->object->call( $config, 'testing' ) );
    }
}

?>
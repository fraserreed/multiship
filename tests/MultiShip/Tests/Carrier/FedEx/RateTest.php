<?php

/*
 * This file is part of the MultiShip package.
 *
 * (c) 2013 Fraser Reed
 *      <fraser.reed@gmail.com>
 *      github.com/fraserreed
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace MultiShip\Tests\Carrier\FedEx;


use MultiShip\Tests\BaseTestCase;

use MultiShip\Carrier\FedEx;
use MultiShip\Carrier\FedEx\Rate;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-15 at 10:22:52.
 *
 * @covers MultiShip\Carrier\AbstractCarrier
 * @covers MultiShip\Request\AbstractRate
 * @covers MultiShip\Request\AbstractRequest
 * @covers MultiShip\Carrier\FedEx\Rate
 * @covers MultiShip\Carrier\FedEx\SimpleRate
 */
class RateTest extends BaseTestCase
{
    /**
     * @var Rate
     */
    protected $object;

    protected function setUp()
    {
        $this->object = new Rate();
    }

    /**
     * @covers \MultiShip\Carrier\FedEx\Rate::parseResponse
     */
    public function testParseResponse()
    {
        $data     = $this->getFixture( 'FedEx/RateResponse.json' );
        $response = json_decode( $data, false );

        $actual = $this->object->parseResponse( $response );

        $this->assertCount( 1, $actual->getNotes() );
        $this->assertCount( 2, $actual->getRates() );

        /** @var $rate \MultiShip\Response\Elements\Rate */
        foreach( $actual->getRates() as $rate )
        {
            $this->assertContains( $rate->getTotal()->getValue(), array( 225.58, 88.7 ) );
            $this->assertContains( $rate->getServiceCode(), array( 'FIRST_OVERNIGHT', 'PRIORITY_OVERNIGHT' ) );
            $this->assertEquals( 'YOUR_PACKAGING', $rate->getPackageType() );
        }

        $this->assertEquals( 'SUCCESS', $actual->getStatusCode() );
        $this->assertEquals( 'Request was successfully processed.', $actual->getStatusDescription() );
        $this->assertEquals( 2, $actual->getCount() );
    }

    /**
     * @covers \MultiShip\Carrier\FedEx\Rate::parseResponse
     */
    public function testParseResponseNet()
    {
        $data     = $this->getFixture( 'FedEx/RateResponseNet.json' );
        $response = json_decode( $data, false );

        $actual = $this->object->parseResponse( $response );

        $this->assertCount( 1, $actual->getNotes() );
        $this->assertCount( 2, $actual->getRates() );

        /** @var $rate \MultiShip\Response\Elements\Rate */
        foreach( $actual->getRates() as $rate )
        {
            $this->assertContains( $rate->getTotal()->getValue(), array( 225.58, 88.7 ) );
            $this->assertContains( $rate->getServiceCode(), array( 'FIRST_OVERNIGHT', 'PRIORITY_OVERNIGHT' ) );
            $this->assertEquals( 'YOUR_PACKAGING', $rate->getPackageType() );
        }

        $this->assertEquals( 'SUCCESS', $actual->getStatusCode() );
        $this->assertEquals( 'Request was successfully processed.', $actual->getStatusDescription() );
        $this->assertEquals( 2, $actual->getCount() );
    }

    /**
     * @covers \MultiShip\Carrier\FedEx\Rate::parseResponse
     */
    public function testParseResponseEmpty()
    {
        $data     = $this->getFixture( 'FedEx/RateResponseEmpty.json' );
        $response = json_decode( $data, false );

        $actual = $this->object->parseResponse( $response );

        $this->assertCount( 1, $actual->getNotes() );
        $this->assertEmpty( $actual->getRates() );

        $this->assertEquals( 'SUCCESS', $actual->getStatusCode() );
        $this->assertEquals( 'Request was successfully processed.', $actual->getStatusDescription() );
        $this->assertEquals( 0, $actual->getCount() );
    }
}

?>
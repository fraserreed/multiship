<?php

/*
 * This file is part of the MultiShip package.
 *
 * (c) 2013 Fraser Reed
 *      <fraser.reed@gmail.com>
 *      github.com/fraserreed
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace MultiShip\Tests\Carrier;


use MultiShip\Exceptions\MultiShipException;
use MultiShip\Services\Soap;
use MultiShip\Tests\BaseTestCase;

use MultiShip\Configuration;
use MultiShip\Carrier\FedEx;

use MultiShip\Carrier\FedEx\Rate;


/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-15 at 10:22:52.
 *
 * @covers MultiShip\Carrier\AbstractCarrier
 * @covers MultiShip\Carrier\FedEx
 */
class FedExTest extends BaseTestCase
{

    /**
     * @var FedEx
     */
    protected $object;

    protected function setUp()
    {
        $configuration = new Configuration();

        $this->object = new FedEx( $configuration );
    }

    /**
     * @covers MultiShip\Carrier\FedEx::getCarrierCode
     */
    public function testGetCarrierCode()
    {
        $this->assertEquals( 'FedEx', $this->object->getCarrierCode() );
    }

    /**
     * @covers MultiShip\Carrier\FedEx::getEndPointUrl
     */
    public function testGetEndPointUrlDebug()
    {
        //$this->object->setDebug( true );

        $this->assertEquals( 'https://wsbeta.fedex.com:443/web-services/', $this->object->getEndPointUrl() );
    }

    /**
     * @covers MultiShip\Carrier\FedEx::getEndPointUrl
     */
    public function testGetEndPointUrl()
    {
        $this->assertEquals( 'https://wsbeta.fedex.com:443/web-services/', $this->object->getEndPointUrl() );
        //$this->assertEquals( 'https://ws.fedex.com:443/web-services/', $this->object->getEndPointUrl() );
    }

    /**
     * @covers MultiShip\Carrier\FedEx::getSoapHeader
     */
    public function testGetSoapHeader()
    {
        $this->assertNull( $this->object->getSoapHeader() );
    }

    /**
     * @covers MultiShip\Carrier\FedEx::getRateRequest
     */
    public function testGetRateRequest()
    {
        $this->assertInstanceOf( '\MultiShip\Carrier\FedEx\Rate', $this->object->getRateRequest() );
    }

    /**
     * @covers MultiShip\Carrier\FedEx::getSimpleRateRequest
     */
    public function testGetSimpleRateRequest()
    {
        $this->assertInstanceOf( '\MultiShip\Carrier\FedEx\SimpleRate', $this->object->getSimpleRateRequest() );
    }

    /**
     * @covers MultiShip\Carrier\FedEx::getShipmentRequest
     */
    public function testGetShipmentRequest()
    {
        $this->assertInstanceOf( '\MultiShip\Carrier\FedEx\Shipment', $this->object->getShipmentRequest() );
    }

    /**
     * @covers MultiShip\Carrier\AbstractCarrier::request
     */
    public function testRequest()
    {
        $response = $this->getFixture( 'FedEx/RateResponse.json' );
        $response = json_decode( $response );

        $soapRequest = $this->getMock( '\MultiShip\Services\Soap', array( 'setBody', 'setHeader', 'call' ), array() );
        $soapRequest->expects( $this->any() )->method( 'call' )->will( $this->returnValue( $response ) );
        $this->object->setSoap( $soapRequest );

        $requestBody = $this->getFixture( 'FedEx/RateRequestBody.json' );

        $request = $this->getMock( '\MultiShip\Carrier\FedEx\Rate', array( 'getRequestBody', 'getOperation' ), array() );
        $request->expects( $this->any() )->method( 'getRequestBody' )->will( $this->returnValue( $requestBody ) );

        $response = $this->object->request( $request );

        $this->assertNotNull( $response );
        $this->assertInstanceOf( '\MultiShip\Response\Collections\Rate', $response );
        $this->assertEquals( 2, $response->getCount() );
        $this->assertCount( 2, $response->getRates() );
    }

    /**
     * @covers MultiShip\Carrier\AbstractCarrier::request
     */
    public function testRequestException()
    {
        $exception = new \Exception( 'Error completing request', 900 );
        $soap      = $this->getMock( '\MultiShip\Services\Soap', array( 'getSoapHeader' ), array() );
        $soap->expects( $this->any() )->method( 'getSoapHeader' )->will( $this->throwException( $exception ) );
        $this->object->setSoap( new Soap() );

        $output = $this->object->request( new Rate() );

        $this->assertNotNull( $output );
        $this->assertInstanceOf( '\MultiShip\Response\Collections\Rate', $output );
        $this->assertEquals( 'From address must be provided for all shipment requests.', $output->getStatusDescription() );
    }

    /**
     * @covers MultiShip\Carrier\AbstractCarrier::request
     */
    public function testRateRequestErrorDetailException()
    {
        $exception = new \Exception( 'Error completing request', 900 );
        $soap      = $this->getMock( '\MultiShip\Services\Soap', array( 'getSoapHeader' ), array() );
        $soap->expects( $this->any() )->method( 'getSoapHeader' )->will( $this->throwException( $exception ) );
        $this->object->setSoap( new Soap() );

        $output = $this->object->request( new Rate() );

        $this->assertNotNull( $output );
        $this->assertInstanceOf( '\MultiShip\Response\Collections\Rate', $output );
        $this->assertEquals( 'From address must be provided for all shipment requests.', $output->getStatusDescription() );
    }

    /**
     * @covers MultiShip\Carrier\AbstractCarrier::request
     */
    public function testShipmentRequestErrorDetailException()
    {
        $exception = new \Exception( 'Error completing request', 900 );
        $soap      = $this->getMock( '\MultiShip\Services\Soap', array( 'getSoapHeader' ), array() );
        $soap->expects( $this->any() )->method( 'getSoapHeader' )->will( $this->throwException( $exception ) );
        $this->object->setSoap( $soap );

        $requestBody = $this->getFixture( 'FedEx/ShipmentRequestBody.json' );

        $request = $this->getMock( '\MultiShip\Carrier\FedEx\Shipment', array( 'getRequestBody', 'getOperation' ), array() );
        $request->expects( $this->any() )->method( 'getRequestBody' )->will( $this->returnValue( $requestBody ) );

        $output = $this->object->request( $request );

        $this->assertNotNull( $output );
        $this->assertInstanceOf( '\MultiShip\Response\Collections\Shipment', $output );
        $this->assertEquals( 'Function ("") is not a valid method for this service', $output->getStatusDescription() );
    }

    /**
     * @covers MultiShip\Carrier\AbstractCarrier::request
     */
    public function testShipmentRequestEmptyResponseException()
    {
        $request = $this->getMock( '\MultiShip\Carrier\FedEx\Shipment', array( 'isShipmentComplete' ), array() );
        $request->expects( $this->once() )->method( 'isShipmentComplete' )->will( $this->returnValue( true ) );

        try
        {
            $this->object->request( $request );
            $this->fail( 'Request should have thrown exception' );
        }
        catch( MultiShipException $e )
        {
            $this->assertEquals( 'Error completing shipment request.', $e->getMessage() );
        }
    }
}

?>
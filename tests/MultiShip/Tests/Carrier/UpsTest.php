<?php
namespace MultiShip\Tests\Carrier;


use MultiShip\Tests\BaseTestCase;

use SoapHeader;
use MultiShip\Services\Soap;
use MultiShip\Configuration;
use MultiShip\Carrier\Ups;
use MultiShip\Carrier\Ups\Rate;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-15 at 10:22:52.
 *
 * @covers MultiShip\Carrier\AbstractCarrier
 * @covers MultiShip\Carrier\Ups
 * @covers MultiShip\Request\AbstractRate
 */
class UpsTest extends BaseTestCase
{
    /**
     * @var Configuration
     */
    protected $configuration;

    /**
     * @var Ups
     */
    protected $object;

    protected function setUp()
    {
        $this->configuration = new Configuration();
        $this->configuration->setUserId( 98100 );
        $this->configuration->setPassword( 'ups_password' );
        $this->configuration->setAccessKey( 'aCC3$$' );
        $this->configuration->setWsdl( $this->getFixture( 'Wsdl/Test.wsdl', true ) );

        $this->object = new Ups( $this->configuration );
    }

    /**
     * @covers MultiShip\Carrier\Ups::getSoapHeader
     */
    public function testGetSoapHeader()
    {
        $expected = new SoapHeader(
            'http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0',
            'UPSSecurity',
            array(
                 'UsernameToken'      => array(
                     'Username' => $this->configuration->getUserId(),
                     'Password' => $this->configuration->getPassword()
                 ),
                 'ServiceAccessToken' => array(
                     'AccessLicenseNumber' => $this->configuration->getAccessKey()
                 )
            )
        );

        $this->assertEquals( $expected, $this->object->getSoapHeader() );
    }

    /**
     * @covers MultiShip\Carrier\AbstractCarrier::setSoap
     */
    public function testSetSoap()
    {
        $soap = new Soap();
        $soap->setOptions( array( 'testing' => true ) );

        $this->object->setSoap( $soap );

        $this->assertNotNull( $this->object->getSoap() );
        $this->assertEquals( $soap, $this->object->getSoap() );
    }

    /**
     * @covers MultiShip\Carrier\AbstractCarrier::getSoap
     */
    public function testGetSoap()
    {
        $this->assertNotNull( $this->object->getSoap() );
        $this->assertInstanceOf( '\MultiShip\Services\Soap', $this->object->getSoap() );
    }

    /**
     * @covers MultiShip\Carrier\Ups::getRateRequest
     */
    public function testGetRateRequest()
    {
        $this->assertInstanceOf( '\MultiShip\Carrier\Ups\Rate', $this->object->getRateRequest() );
    }

    /**
     * @covers MultiShip\Carrier\Ups::getSimpleRateRequest
     */
    public function testGetSimpleRateRequest()
    {
        $this->assertInstanceOf( '\MultiShip\Carrier\Ups\SimpleRate', $this->object->getSimpleRateRequest() );
    }

    /**
     * @covers MultiShip\Carrier\AbstractCarrier::request
     */
    public function testRequest()
    {
        $response = $this->getFixture( 'Ups/RateResponse.json' );
        $response = json_decode( $response );

        $soapRequest = $this->getMock( '\MultiShip\Services\Soap', array( 'setBody', 'setHeader', 'call' ), array() );
        $soapRequest->expects( $this->any() )->method( 'call' )->will( $this->returnValue( $response ) );
        $this->object->setSoap( $soapRequest );

        $requestBody = $this->getFixture( 'Ups/RateRequestBody.json' );

        $request = $this->getMock( '\MultiShip\Carrier\Ups\Rate', array( 'getRequestBody', 'getOperation' ), array() );
        $request->expects( $this->any() )->method( 'getRequestBody' )->will( $this->returnValue( $requestBody ) );

        $response = $this->object->request( $request );

        $this->assertNotNull( $response );
        $this->assertInstanceOf( '\MultiShip\Response\Collections\Rate', $response );
        $this->assertEquals( 7, $response->getCount() );
        $this->assertCount( 7, $response->getRates() );
    }

    /**
     * @covers MultiShip\Carrier\AbstractCarrier::request
     */
    public function testRequestException()
    {
        $exception = new \Exception( 'Error completing request', 900 );
        $soap      = $this->getMock( '\MultiShip\Services\Soap', array( 'getSoapHeader' ), array() );
        $soap->expects( $this->any() )->method( 'getSoapHeader' )->will( $this->throwException( $exception ) );
        $this->object->setSoap( new Soap() );

        $output = $this->object->request( new Rate() );

        $this->assertNotNull( $output );
        $this->assertInstanceOf( '\MultiShip\Response\Collections\Rate', $output );
        $this->assertEquals( 'From address must be provided for all shipment requests.', $output->getStatusDescription() );
    }

    /**
     * @covers MultiShip\Carrier\AbstractCarrier::request
     */
    public function testRequestErrorDetailException()
    {
        $exception = new \Exception( 'Error completing request', 900 );
        $soap      = $this->getMock( '\MultiShip\Services\Soap', array( 'getSoapHeader' ), array() );
        $soap->expects( $this->any() )->method( 'getSoapHeader' )->will( $this->throwException( $exception ) );
        $this->object->setSoap( new Soap() );

        $output = $this->object->request( new Rate() );

        $this->assertNotNull( $output );
        $this->assertInstanceOf( '\MultiShip\Response\Collections\Rate', $output );
        $this->assertEquals( 'From address must be provided for all shipment requests.', $output->getStatusDescription() );
    }

    /**
     * @covers MultiShip\Carrier\AbstractCarrier::request
     */
    public function testRequestSoapException()
    {
        $exception   = new \SoapFault( "test", 'Error completing request', 'test', json_decode( $this->getFixture( 'Ups/RateResponseError.json' ) ) );
        $soapRequest = $this->getMock( '\MultiShip\Services\Soap', array( 'setBody', 'setHeader', 'call' ), array() );
        $soapRequest->expects( $this->any() )->method( 'call' )->will( $this->throwException( $exception ) );
        $this->object->setSoap( $soapRequest );

        $requestBody = $this->getFixture( 'Ups/RateRequestBody.json' );

        $request = $this->getMock( '\MultiShip\Carrier\Ups\Rate', array( 'getRequestBody', 'getOperation' ), array() );
        $request->expects( $this->any() )->method( 'getRequestBody' )->will( $this->returnValue( $requestBody ) );

        $output = $this->object->request( $request );

        $this->assertNotNull( $output );
        $this->assertInstanceOf( '\MultiShip\Response\Collections\Rate', $output );
        $this->assertEquals( 111, $output->getStatusCode() );
        $this->assertEquals( 'Soap Exception', $output->getStatusDescription() );
    }
}

?>
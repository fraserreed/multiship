<?php
namespace MultiShip\Tests\Package;


use MultiShip\Tests\BaseTestCase;
use MultiShip\Package\Package;
use MultiShip\Package\RatedPackage;

use MultiShip\Charge\TotalCharge;
use MultiShip\Charge\TransportationCharge;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-05 at 23:02:52.
 */
class RatedPackageTest extends BaseTestCase
{
    /**
     * @var RatedPackage
     */
    protected $object;

    protected function setUp()
    {
        $this->object = new RatedPackage();

        $totalCharge = new TotalCharge();
        $totalCharge->setCurrencyCode( 'USD' );
        $totalCharge->setValue( 72.50 );
        $this->object->addCharge( $totalCharge );

        $billingPackage = new Package();
        $billingPackage->setLength( 12 );
        $billingPackage->setWidth( 20 );
        $billingPackage->setHeight( 3 );
        $billingPackage->setDimensionUnitOfMeasure( 'in' );
        $billingPackage->setWeight( 5 );
        $billingPackage->setWeightUnitOfMeasure( 'lbs' );
        $this->object->setBillingPackage( $billingPackage );
    }

    /**
     * @covers \MultiShip\Package\RatedPackage::addCharge
     */
    public function testAddCharge()
    {
        $transportationCharge = new TransportationCharge();
        $transportationCharge->setCurrencyCode( 'USD' );
        $transportationCharge->setValue( 12.75 );
        $this->object->addCharge( $transportationCharge );

        $charges = $this->object->getCharges();
        $this->assertNotNull( $charges );
        $this->assertCount( 2, $charges );

        /** @var $charge \MultiShip\Charge\AbstractCharge */
        foreach( $charges as $charge )
        {
            $this->assertContains( $charge->getValue(), array( 12.75, 72.50 ) );
            $this->assertEquals( 'USD', $charge->getCurrencyCode() );
            $this->assertFalse( $charge->getNegative() );
        }
    }

    /**
     * @covers \MultiShip\Package\RatedPackage::getCharges
     */
    public function testGetCharges()
    {
        $charges = $this->object->getCharges();
        $this->assertNotNull( $charges );
        $this->assertCount( 1, $charges );

        /** @var $charge \MultiShip\Charge\AbstractCharge */
        foreach( $charges as $charge )
        {
            $this->assertEquals( 'Total', $charge->getChargeType() );
            $this->assertEquals( 72.50, $charge->getValue() );
            $this->assertEquals( 'USD', $charge->getCurrencyCode() );
            $this->assertFalse( $charge->getNegative() );
        }
    }

    /**
     * @covers \MultiShip\Package\RatedPackage::setBillingPackage
     */
    public function testSetBillingPackage()
    {
        $newBillingPackage = new Package();
        $newBillingPackage->setLength( 24 );
        $newBillingPackage->setWidth( 30 );
        $newBillingPackage->setHeight( 4 );
        $newBillingPackage->setDimensionUnitOfMeasure( 'in' );
        $newBillingPackage->setWeight( 12 );
        $newBillingPackage->setWeightUnitOfMeasure( 'lbs' );
        $this->object->setBillingPackage( $newBillingPackage );

        $billingPackage = $this->object->getBillingPackage();

        $this->assertInstanceOf( '\MultiShip\Package\Package', $billingPackage );
        $this->assertEquals( 24, $billingPackage->getLength() );
        $this->assertEquals( 30, $billingPackage->getWidth() );
        $this->assertEquals( 4, $billingPackage->getHeight() );
        $this->assertEquals( 12, $billingPackage->getWeight() );
    }

    /**
     * @covers \MultiShip\Package\RatedPackage::getBillingPackage
     */
    public function testGetBillingPackage()
    {
        $billingPackage = $this->object->getBillingPackage();

        $this->assertInstanceOf( '\MultiShip\Package\Package', $billingPackage );

        $this->assertEquals( 12, $billingPackage->getLength() );
        $this->assertEquals( 20, $billingPackage->getWidth() );
        $this->assertEquals( 3, $billingPackage->getHeight() );
        $this->assertEquals( 5, $billingPackage->getWeight() );
    }
}

?>
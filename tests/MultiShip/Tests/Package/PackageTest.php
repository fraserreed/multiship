<?php

/*
 * This file is part of the MultiShip package.
 *
 * (c) 2013 Fraser Reed
 *      <fraser.reed@gmail.com>
 *      github.com/fraserreed
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace MultiShip\Tests\Package;


use MultiShip\Tests\BaseTestCase;
use MultiShip\Package\Package;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-05 at 23:02:52.
 */
class PackageTest extends BaseTestCase
{
    /**
     * @var Package
     */
    protected $object;

    protected function setUp()
    {
        $this->object = new Package();

        $this->object->setLength( 12 );
        $this->object->setWidth( 20 );
        $this->object->setHeight( 3 );
        $this->object->setDimensionUnitOfMeasure( 'in' );
        $this->object->setWeight( 5 );
        $this->object->setWeightUnitOfMeasure( 'lbs' );
    }

    /**
     * @covers MultiShip\Package\Package::setLength
     */
    public function testSetLength()
    {
        $this->object->setLength( 16 );

        $this->assertNotNull( $this->object->getLength() );
        $this->assertEquals( 16, $this->object->getLength() );
    }

    /**
     * @covers MultiShip\Package\Package::getLength
     */
    public function testGetLength()
    {
        $this->assertNotNull( $this->object->getLength() );
        $this->assertEquals( 12, $this->object->getLength() );
    }

    /**
     * @covers MultiShip\Package\Package::setWidth
     */
    public function testSetWidth()
    {
        $this->object->setWidth( 24 );

        $this->assertNotNull( $this->object->getWidth() );
        $this->assertEquals( 24, $this->object->getWidth() );
    }

    /**
     * @covers MultiShip\Package\Package::getWidth
     */
    public function testGetWidth()
    {
        $this->assertNotNull( $this->object->getWidth() );
        $this->assertEquals( 20, $this->object->getWidth() );
    }

    /**
     * @covers MultiShip\Package\Package::setHeight
     */
    public function testSetHeight()
    {
        $this->object->setHeight( 12 );

        $this->assertNotNull( $this->object->getHeight() );
        $this->assertEquals( 12, $this->object->getHeight() );
    }

    /**
     * @covers MultiShip\Package\Package::getHeight
     */
    public function testGetHeight()
    {
        $this->assertNotNull( $this->object->getHeight() );
        $this->assertEquals( 3, $this->object->getHeight() );
    }

    /**
     * @covers MultiShip\Package\Package::setDimensionUnitOfMeasure
     */
    public function testSetDimensionUnitOfMeasure()
    {
        $this->object->setDimensionUnitOfMeasure( 'cm' );

        $this->assertNotNull( $this->object->getDimensionUnitOfMeasure() );
        $this->assertEquals( 'cm', $this->object->getDimensionUnitOfMeasure() );
    }

    /**
     * @covers MultiShip\Package\Package::setDimensionUnitOfMeasure
     * @expectedException \MultiShip\Exceptions\MultiShipException
     */
    public function testSetDimensionUnitOfMeasureException()
    {
        $this->object->setDimensionUnitOfMeasure( 'km' );
    }

    /**
     * @covers MultiShip\Package\Package::getDimensionUnitOfMeasure
     */
    public function testGetDimensionUnitOfMeasure()
    {
        $this->assertNotNull( $this->object->getDimensionUnitOfMeasure() );
        $this->assertEquals( 'in', $this->object->getDimensionUnitOfMeasure() );
    }

    /**
     * @covers MultiShip\Package\Package::getDimensionUnitOfMeasureDescription
     */
    public function testGetDimensionUnitOfMeasureDescriptionInches()
    {
        $this->assertNotNull( $this->object->getDimensionUnitOfMeasureDescription() );
        $this->assertEquals( 'Inches', $this->object->getDimensionUnitOfMeasureDescription() );
    }

    /**
     * @covers MultiShip\Package\Package::getDimensionUnitOfMeasureDescription
     */
    public function testGetDimensionUnitOfMeasureDescriptionCentimeters()
    {
        $this->object->setDimensionUnitOfMeasure( 'cm' );

        $this->assertNotNull( $this->object->getDimensionUnitOfMeasureDescription() );
        $this->assertEquals( 'Centimeters', $this->object->getDimensionUnitOfMeasureDescription() );
    }

    /**
     * @covers MultiShip\Package\Package::setWeight
     */
    public function testSetWeight()
    {
        $this->object->setWeight( 10 );

        $this->assertNotNull( $this->object->getWeight() );
        $this->assertEquals( 10, $this->object->getWeight() );
    }

    /**
     * @covers MultiShip\Package\Package::getWeight
     */
    public function testGetWeight()
    {
        $this->assertNotNull( $this->object->getWeight() );
        $this->assertEquals( 5, $this->object->getWeight() );
    }

    /**
     * @covers MultiShip\Package\Package::setWeightUnitOfMeasure
     */
    public function testSetWeightUnitOfMeasure()
    {
        $this->object->setWeightUnitOfMeasure( 'kg' );

        $this->assertNotNull( $this->object->getWeightUnitOfMeasure() );
        $this->assertEquals( 'kgs', $this->object->getWeightUnitOfMeasure() );
    }

    /**
     * @covers MultiShip\Package\Package::setWeightUnitOfMeasure
     * @expectedException \MultiShip\Exceptions\MultiShipException
     */
    public function testSetWeightUnitOfMeasureException()
    {
        $this->object->setWeightUnitOfMeasure( 'st' );
    }

    /**
     * @covers MultiShip\Package\Package::getWeightUnitOfMeasure
     */
    public function testGetWeightUnitOfMeasure()
    {
        $this->assertNotNull( $this->object->getWeightUnitOfMeasure() );
        $this->assertEquals( 'lbs', $this->object->getWeightUnitOfMeasure() );
    }

    /**
     * @covers MultiShip\Package\Package::getWeightUnitOfMeasure
     */
    public function testGetWeightUnitOfMeasureSingular()
    {
        $this->assertNotNull( $this->object->getWeightUnitOfMeasure( true ) );
        $this->assertEquals( 'lb', $this->object->getWeightUnitOfMeasure( true ) );
    }

    /**
     * @covers MultiShip\Package\Package::getWeightUnitOfMeasure
     */
    public function testGetWeightUnitOfMeasureKilograms()
    {
        $this->object->setWeightUnitOfMeasure( 'kgs' );

        $this->assertNotNull( $this->object->getWeightUnitOfMeasure() );
        $this->assertEquals( 'kgs', $this->object->getWeightUnitOfMeasure() );
    }

    /**
     * @covers MultiShip\Package\Package::getWeightUnitOfMeasure
     */
    public function testGetWeightUnitOfMeasureSingularKilograms()
    {
        $this->object->setWeightUnitOfMeasure( 'kgs' );

        $this->assertNotNull( $this->object->getWeightUnitOfMeasure( true ) );
        $this->assertEquals( 'kg', $this->object->getWeightUnitOfMeasure( true ) );
    }

    /**
     * @covers MultiShip\Package\Package::getWeightUnitOfMeasureDescription
     */
    public function testGetWeightUnitOfMeasureDescriptionPounds()
    {
        $this->assertNotNull( $this->object->getWeightUnitOfMeasureDescription() );
        $this->assertEquals( 'Pounds', $this->object->getWeightUnitOfMeasureDescription() );
    }

    /**
     * @covers MultiShip\Package\Package::getWeightUnitOfMeasureDescription
     */
    public function testGetWeightUnitOfMeasureDescriptionKilograms()
    {
        $this->object->setWeightUnitOfMeasure( 'kg' );

        $this->assertNotNull( $this->object->getWeightUnitOfMeasureDescription() );
        $this->assertEquals( 'Kilograms', $this->object->getWeightUnitOfMeasureDescription() );
    }
}

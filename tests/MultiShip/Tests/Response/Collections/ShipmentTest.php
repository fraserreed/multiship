<?php

/*
 * This file is part of the MultiShip package.
 *
 * (c) 2013 Fraser Reed
 *      <fraser.reed@gmail.com>
 *      github.com/fraserreed
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace MultiShip\Tests\Response\Collections;


use MultiShip\Tests\BaseTestCase;

use MultiShip\Response\Collections\Shipment;
use MultiShip\Package\Package;
use MultiShip\Response\Elements\ShipmentPackage;

use MultiShip\Charge\TransportationCharge;
use MultiShip\Charge\TotalCharge;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-15 at 10:22:52.
 *
 * @covers MultiShip\Response\Collections\AbstractCollection
 * @covers MultiShip\Response\Collections\Shipment
 */
class ShipmentTest extends BaseTestCase
{

    /**
     * @var Shipment
     */
    protected $object;

    protected function setUp()
    {
        $this->object = new Shipment();

        $this->object->setCount( 1 );

        $this->object->setStatusCode( 'SUCCESS' );
        $this->object->setStatusDescription( 'Request was successfully processed.' );

        $this->object->setMasterTrackingNumber( '890123ZA1243' );

        $shipmentPackage = new ShipmentPackage();
        $shipmentPackage->setTrackingNumber( '123456789012345678' );
        $this->object->addShipmentPackage( $shipmentPackage );

        $billingPackage = new Package();
        $billingPackage->setDimensionUnitOfMeasure( 'in' );
        $billingPackage->setWidth( 12 );
        $billingPackage->setLength( 12 );
        $billingPackage->setHeight( 1 );
        $billingPackage->setWeightUnitOfMeasure( 'lb' );
        $billingPackage->setWeight( 3 );
        $this->object->setBillingPackage( $billingPackage );

        $this->object->setServiceCode( 'FEDEX_EXPRESS_SAVER' );
        $this->object->setServiceDescription( 'FedEx Express Saver' );

        $this->object->setDetail( array( 'detail' => array( 'sub-detail' => true ) ) );

        $transportationCharge = new TransportationCharge();
        $transportationCharge->setCurrencyCode( 'USD' );
        $transportationCharge->setValue( 100.99 );
        $this->object->addCharge( $transportationCharge );

        $totalCharge = new TotalCharge();
        $totalCharge->setValue( '121.75' );
        $totalCharge->setCurrencyCode( 'USD' );
        $this->object->setTotal( $totalCharge );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::setCarrierCode
     */
    public function testSetCarrierCode()
    {
        $this->object->setCarrierCode( 'UPS' );

        $this->assertNotNull( $this->object->getCarrierCode() );
        $this->assertEquals( 'UPS', $this->object->getCarrierCode() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::setServiceCode
     */
    public function testSetServiceCode()
    {
        $this->object->setServiceCode( 'FEDEX_NEXT_DAY_AIR' );

        $this->assertNotNull( $this->object->getServiceCode() );
        $this->assertEquals( 'FEDEX_NEXT_DAY_AIR', $this->object->getServiceCode() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::getServiceCode
     */
    public function testGetServiceCode()
    {
        $this->assertNotNull( $this->object->getServiceCode() );
        $this->assertEquals( 'FEDEX_EXPRESS_SAVER', $this->object->getServiceCode() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::setServiceDescription
     */
    public function testSetServiceDescription()
    {
        $this->object->setServiceDescription( 'FedEx Next Day Air' );

        $this->assertNotNull( $this->object->getServiceDescription() );
        $this->assertEquals( 'FedEx Next Day Air', $this->object->getServiceDescription() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::getServiceDescription
     */
    public function testGetServiceDescription()
    {
        $this->assertNotNull( $this->object->getServiceDescription() );
        $this->assertEquals( 'FedEx Express Saver', $this->object->getServiceDescription() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::getMasterTrackingNumber
     */
    public function testGetMasterTrackingNumber()
    {
        $this->assertNotNull( $this->object->getMasterTrackingNumber() );
        $this->assertEquals( '890123ZA1243', $this->object->getMasterTrackingNumber() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::setMasterTrackingNumber
     */
    public function testSetMasterTrackingNumber()
    {
        $this->object->setMasterTrackingNumber( '1Z788989234891' );

        $this->assertNotNull( $this->object->getMasterTrackingNumber() );
        $this->assertEquals( '1Z788989234891', $this->object->getMasterTrackingNumber() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::addShipmentPackage
     */
    public function testAddShipmentPackage()
    {
        $shipment = new ShipmentPackage();
        $shipment->setTrackingNumber( '1Z9023492340902390' );
        $this->object->addShipmentPackage( $shipment );

        $this->assertNotNull( $this->object->getShipmentPackages() );
        $this->assertCount( 2, $this->object->getShipmentPackages() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::setShipmentPackages
     */
    public function testSetShipmentPackages()
    {
        $shipment = new ShipmentPackage();
        $shipment->setTrackingNumber( '1Z9023492340902390' );
        $this->object->setShipmentPackages( array( $shipment ) );

        $this->assertNotNull( $this->object->getShipmentPackages() );
        $this->assertEquals( array( $shipment ), $this->object->getShipmentPackages() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::getShipmentPackages
     */
    public function testGetShipmentPackages()
    {
        $shipment = new ShipmentPackage();
        $shipment->setTrackingNumber( '123456789012345678' );

        $this->assertNotNull( $this->object->getShipmentPackages() );
        $this->assertEquals( array( $shipment ), $this->object->getShipmentPackages() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::setBillingPackage
     */
    public function testSetBillingPackage()
    {
        $billingPackage = new Package();
        $billingPackage->setDimensionUnitOfMeasure( 'in' );
        $billingPackage->setHeight( 14 );
        $billingPackage->setLength( 16 );
        $billingPackage->setHeight( 31 );
        $billingPackage->setWeightUnitOfMeasure( 'lb' );
        $billingPackage->setWeight( 10 );
        $this->object->setBillingPackage( $billingPackage );

        $this->assertNotNull( $this->object->getBillingPackage() );
        $this->assertEquals( $billingPackage, $this->object->getBillingPackage() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::getBillingPackage
     */
    public function testGetBillingPackage()
    {
        $billingPackage = new Package();
        $billingPackage->setDimensionUnitOfMeasure( 'in' );
        $billingPackage->setWidth( 12 );
        $billingPackage->setLength( 12 );
        $billingPackage->setHeight( 1 );
        $billingPackage->setWeightUnitOfMeasure( 'lb' );
        $billingPackage->setWeight( 3 );

        $this->assertNotNull( $this->object->getBillingPackage() );
        $this->assertEquals( $billingPackage, $this->object->getBillingPackage() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::addCharge
     */
    public function testAddCharge()
    {
        $totalCharge = new TotalCharge();
        $totalCharge->setCurrencyCode( 'USD' );
        $totalCharge->setValue( 16.56 );
        $this->object->addCharge( $totalCharge );

        $this->assertNotNull( $this->object->getCharges() );
        $this->assertCount( 2, $this->object->getCharges() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::getCharges
     */
    public function testGetCharges()
    {
        $this->assertNotNull( $this->object->getCharges() );
        $this->assertCount( 1, $this->object->getCharges() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::setTotal
     */
    public function testSetTotal()
    {
        $totalCharge = new TotalCharge();
        $totalCharge->setValue( '66.75' );
        $totalCharge->setCurrencyCode( 'USD' );
        $this->object->setTotal( $totalCharge );

        $this->assertNotNull( $this->object->getTotal() );
        $this->assertEquals( $totalCharge, $this->object->getTotal() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::getTotal
     */
    public function testGetTotal()
    {
        $totalCharge = new TotalCharge();
        $totalCharge->setValue( '121.75' );
        $totalCharge->setCurrencyCode( 'USD' );

        $this->assertNotNull( $this->object->getTotal() );
        $this->assertEquals( $totalCharge, $this->object->getTotal() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::setCount
     */
    public function testSetCount()
    {
        $this->object->setCount( 3 );

        $this->assertNotNull( $this->object->getCount() );
        $this->assertEquals( 3, $this->object->getCount() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::getCount
     */
    public function testGetCount()
    {
        $this->assertNotNull( $this->object->getCount() );
        $this->assertEquals( 1, $this->object->getCount() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::setStatusDescription
     */
    public function testSetStatusDescription()
    {
        $this->object->setStatusDescription( 'This failed.' );

        $this->assertNotNull( $this->object->getStatusDescription() );
        $this->assertEquals( 'This failed.', $this->object->getStatusDescription() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::getStatusDescription
     */
    public function testGetStatusDescription()
    {
        $this->assertNotNull( $this->object->getStatusDescription() );
        $this->assertEquals( 'Request was successfully processed.', $this->object->getStatusDescription() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::setStatusCode
     */
    public function testSetStatusCode()
    {
        $this->object->setStatusCode( 'FAILURE' );

        $this->assertNotNull( $this->object->getStatusCode() );
        $this->assertEquals( 'FAILURE', $this->object->getStatusCode() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::getStatusCode
     */
    public function testGetStatusCode()
    {
        $this->assertNotNull( $this->object->getStatusCode() );
        $this->assertEquals( 'SUCCESS', $this->object->getStatusCode() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::setDetail
     */
    public function testSetDetail()
    {
        $this->object->setDetail( 'detailed message.' );

        $this->assertNotNull( $this->object->getDetail() );
        $this->assertEquals( 'detailed message.', $this->object->getDetail() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::getDetail
     */
    public function testGetDetail()
    {
        $this->assertNotNull( $this->object->getDetail() );
        $this->assertEquals( array( 'detail' => array( 'sub-detail' => true ) ), $this->object->getDetail() );
    }
}

?>
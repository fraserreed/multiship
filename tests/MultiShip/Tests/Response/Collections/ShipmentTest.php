<?php

/*
 * This file is part of the MultiShip package.
 *
 * (c) 2013 Fraser Reed
 *      <fraser.reed@gmail.com>
 *      github.com/fraserreed
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace MultiShip\Tests\Response\Collections;


use MultiShip\Tests\BaseTestCase;

use MultiShip\Response\Collections\Shipment;
use MultiShip\Response\Elements\Shipment as ShipmentElement;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-15 at 10:22:52.
 *
 * @covers MultiShip\Response\Collections\AbstractCollection
 * @covers MultiShip\Response\Collections\Shipment
 */
class ShipmentTest extends BaseTestCase
{

    /**
     * @var Shipment
     */
    protected $object;

    protected function setUp()
    {
        $this->object = new Shipment();

        $this->object->setCount( 1 );

        $this->object->setStatusCode( 'SUCCESS' );
        $this->object->setStatusDescription( 'Request was successfully processed.' );

        $shipment = new ShipmentElement();
        $shipment->setTrackingNumber( '123456789012345678' );
        $this->object->addShipment( $shipment );

        $this->object->setDetail( array( 'detail' => array( 'sub-detail' => true ) ) );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::addShipment
     */
    public function testAddShipment()
    {
        $shipment = new ShipmentElement();
        $shipment->setTrackingNumber( '1Z9023492340902390' );
        $this->object->addShipment( $shipment );

        $this->assertNotNull( $this->object->getShipments() );
        $this->assertCount( 2, $this->object->getShipments() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::setShipments
     */
    public function testSetShipments()
    {
        $shipment = new ShipmentElement();
        $shipment->setTrackingNumber( '1Z9023492340902390' );
        $this->object->setShipments( array( $shipment ) );

        $this->assertNotNull( $this->object->getShipments() );
        $this->assertEquals( array( $shipment ), $this->object->getShipments() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Shipment::getShipments
     */
    public function testGetShipments()
    {
        $shipment = new ShipmentElement();
        $shipment->setTrackingNumber( '123456789012345678' );

        $this->assertNotNull( $this->object->getShipments() );
        $this->assertEquals( array( $shipment ), $this->object->getShipments() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::setCount
     */
    public function testSetCount()
    {
        $this->object->setCount( 3 );

        $this->assertNotNull( $this->object->getCount() );
        $this->assertEquals( 3, $this->object->getCount() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::getCount
     */
    public function testGetCount()
    {
        $this->assertNotNull( $this->object->getCount() );
        $this->assertEquals( 1, $this->object->getCount() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::setStatusDescription
     */
    public function testSetStatusDescription()
    {
        $this->object->setStatusDescription( 'This failed.' );

        $this->assertNotNull( $this->object->getStatusDescription() );
        $this->assertEquals( 'This failed.', $this->object->getStatusDescription() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::getStatusDescription
     */
    public function testGetStatusDescription()
    {
        $this->assertNotNull( $this->object->getStatusDescription() );
        $this->assertEquals( 'Request was successfully processed.', $this->object->getStatusDescription() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::setStatusCode
     */
    public function testSetStatusCode()
    {
        $this->object->setStatusCode( 'FAILURE' );

        $this->assertNotNull( $this->object->getStatusCode() );
        $this->assertEquals( 'FAILURE', $this->object->getStatusCode() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::getStatusCode
     */
    public function testGetStatusCode()
    {
        $this->assertNotNull( $this->object->getStatusCode() );
        $this->assertEquals( 'SUCCESS', $this->object->getStatusCode() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::setDetail
     */
    public function testSetDetail()
    {
        $this->object->setDetail( 'detailed message.' );

        $this->assertNotNull( $this->object->getDetail() );
        $this->assertEquals( 'detailed message.', $this->object->getDetail() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::getDetail
     */
    public function testGetDetail()
    {
        $this->assertNotNull( $this->object->getDetail() );
        $this->assertEquals( array( 'detail' => array( 'sub-detail' => true ) ), $this->object->getDetail() );
    }
}

?>
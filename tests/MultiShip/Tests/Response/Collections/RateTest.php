<?php

namespace MultiShip\Tests\Response\Collections;


use MultiShip\Tests\BaseTestCase;

use MultiShip\Response\Collections\Rate;
use MultiShip\Response\Elements\SimpleRate;
use MultiShip\Response\Elements\Note;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-15 at 10:22:52.
 *
 * @covers MultiShip\Response\Collections\AbstractCollection
 * @covers MultiShip\Response\Collections\Rate
 */
class RateTest extends BaseTestCase
{

    /**
     * @var Rate
     */
    protected $object;

    protected function setUp()
    {
        $this->object = new Rate();

        $this->object->setCount( 1 );
        $this->object->setStatusCode( 'SUCCESS' );
        $this->object->setStatusDescription( 'Request was successfully processed.' );

        $rate = new SimpleRate();
        $rate->setServiceCode( 'FEDEX_NEXT_DAY_AIR' );
        $rate->setTotal( 100.55 );
        $this->object->addRate( $rate );

        $note = new Note();
        $note->setCode( 'SUCCESS' );
        $note->setDescription( 'Your request was successful.' );
        $this->object->addNote( $note );
    }

    /**
     * @covers \MultiShip\Response\Collections\Rate::addRate
     */
    public function testAddRate()
    {
        $rate = new SimpleRate();
        $rate->setServiceCode( 'FEDEX_PRIORITY_GROUND' );
        $rate->setTotal( 59.55 );
        $this->object->addRate( $rate );

        $this->assertNotNull( $this->object->getRates() );
        $this->assertCount( 2, $this->object->getRates() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Rate::setRates
     */
    public function testSetRates()
    {
        $rate = new SimpleRate();
        $rate->setServiceCode( 'FEDEX_PRIORITY_GROUND' );
        $rate->setTotal( 59.55 );
        $this->object->setRates( array( $rate ) );

        $this->assertNotNull( $this->object->getRates() );
        $this->assertEquals( array( $rate ), $this->object->getRates() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Rate::getRates
     */
    public function testGetRates()
    {
        $rate = new SimpleRate();
        $rate->setServiceCode( 'FEDEX_NEXT_DAY_AIR' );
        $rate->setTotal( 100.55 );

        $this->assertNotNull( $this->object->getRates() );
        $this->assertEquals( array( $rate ), $this->object->getRates() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Rate::addNote
     */
    public function testAddNote()
    {
        $note = new Note();
        $note->setCode( 'SUCCESS' );
        $note->setDescription( 'Your request was successful.' );
        $this->object->addNote( $note );

        $this->assertNotNull( $this->object->getNotes() );
        $this->assertCount( 2, $this->object->getNotes() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Rate::setNotes
     */
    public function testSetNotes()
    {
        $note = new Note();
        $note->setCode( 'FAILURE' );
        $note->setDescription( 'Your request failed.' );
        $this->object->setNotes( array( $note ) );

        $this->assertNotNull( $this->object->getNotes() );
        $this->assertEquals( array( $note ), $this->object->getNotes() );
    }

    /**
     * @covers \MultiShip\Response\Collections\Rate::getNotes
     */
    public function testGetNotes()
    {
        $note = new Note();
        $note->setCode( 'SUCCESS' );
        $note->setDescription( 'Your request was successful.' );

        $this->assertNotNull( $this->object->getNotes() );
        $this->assertEquals( array( $note ), $this->object->getNotes() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::setCount
     */
    public function testSetCount()
    {
        $this->object->setCount( 3 );

        $this->assertNotNull( $this->object->getCount() );
        $this->assertEquals( 3, $this->object->getCount() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::getCount
     */
    public function testGetCount()
    {
        $this->assertNotNull( $this->object->getCount() );
        $this->assertEquals( 1, $this->object->getCount() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::setStatusDescription
     */
    public function testSetStatusDescription()
    {
        $this->object->setStatusDescription( 'This failed.' );

        $this->assertNotNull( $this->object->getStatusDescription() );
        $this->assertEquals( 'This failed.', $this->object->getStatusDescription() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::getStatusDescription
     */
    public function testGetStatusDescription()
    {
        $this->assertNotNull( $this->object->getStatusDescription() );
        $this->assertEquals( 'Request was successfully processed.', $this->object->getStatusDescription() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::setStatusCode
     */
    public function testSetStatusCode()
    {
        $this->object->setStatusCode( 'FAILURE' );

        $this->assertNotNull( $this->object->getStatusCode() );
        $this->assertEquals( 'FAILURE', $this->object->getStatusCode() );
    }

    /**
     * @covers \MultiShip\Response\Collections\AbstractCollection::getStatusCode
     */
    public function testGetStatusCode()
    {
        $this->assertNotNull( $this->object->getStatusCode() );
        $this->assertEquals( 'SUCCESS', $this->object->getStatusCode() );
    }
}

?>
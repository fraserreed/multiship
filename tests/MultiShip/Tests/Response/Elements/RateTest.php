<?php

namespace MultiShip\Tests\Response\Elements;


use MultiShip\Tests\BaseTestCase;

use MultiShip\Response\Elements\Rate;
use MultiShip\Response\Elements\Note;
use MultiShip\Response\Elements\DeliveryGuarantee;

use MultiShip\Package\Package;
use MultiShip\Package\RatedPackage;
use MultiShip\Charge\BaseCharge;
use MultiShip\Charge\SurchargeCharge;
use MultiShip\Charge\TotalCharge;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-15 at 10:22:52.
 *
 * @covers MultiShip\Response\Elements\Rate
 */
class RateTest extends BaseTestCase
{
    /**
     * @var Rate
     */
    protected $object;

    protected function setUp()
    {
        $this->object = new Rate();
        $this->object->setPackageType( 'YOUR_PACKAGING' );

        $billingPackage = new Package();
        $billingPackage->setDimensionUnitOfMeasure( 'in' );
        $billingPackage->setWidth( 12 );
        $billingPackage->setLength( 12 );
        $billingPackage->setHeight( 1 );
        $billingPackage->setWeightUnitOfMeasure( 'lb' );
        $billingPackage->setWeight( 3 );
        $this->object->setBillingPackage( $billingPackage );

        $baseCharge = new BaseCharge();
        $baseCharge->setCurrencyCode( 'USD' );
        $baseCharge->setValue( 15.48 );
        $this->object->addCharge( $baseCharge );

        $surchargeCharge = new SurchargeCharge();
        $surchargeCharge->setCurrencyCode( 'USD' );
        $surchargeCharge->setValue( 1.08 );
        $this->object->addCharge( $surchargeCharge );

        $deliveryGuarantee = new DeliveryGuarantee();
        $deliveryGuarantee->setBusinessDaysInTransit( 5 );
        $deliveryGuarantee->setDeliveryDay( 'MON' );
        $deliveryGuarantee->setDeliveryTime( '09:30 AM' );
        $this->object->setDeliveryGuarantee( $deliveryGuarantee );

        $ratedPackage = new RatedPackage();
        $ratedPackage->setWidth( 16 );
        $ratedPackage->setLength( 16 );
        $ratedPackage->setHeight( 3 );
        $ratedPackage->setWeightUnitOfMeasure( 'lb' );
        $ratedPackage->setWeight( 6 );
        $this->object->addRatedPackage( $ratedPackage );

        $note = new Note();
        $note->setCode( 'SUCCESS' );
        $note->setDescription( 'Request was successful' );
        $this->object->addNote( $note );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::setPackageType
     */
    public function testSetPackageType()
    {
        $this->object->setPackageType( '8X10_BOX' );

        $this->assertNotNull( $this->object->getPackageType() );
        $this->assertEquals( '8X10_BOX', $this->object->getPackageType() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::getPackageType
     */
    public function testGetPackageType()
    {
        $this->assertNotNull( $this->object->getPackageType() );
        $this->assertEquals( 'YOUR_PACKAGING', $this->object->getPackageType() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::setBillingPackage
     */
    public function testSetBillingPackage()
    {
        $billingPackage = new Package();
        $billingPackage->setDimensionUnitOfMeasure( 'in' );
        $billingPackage->setHeight( 14 );
        $billingPackage->setLength( 16 );
        $billingPackage->setHeight( 31 );
        $billingPackage->setWeightUnitOfMeasure( 'lb' );
        $billingPackage->setWeight( 10 );
        $this->object->setBillingPackage( $billingPackage );

        $this->assertNotNull( $this->object->getBillingPackage() );
        $this->assertEquals( $billingPackage, $this->object->getBillingPackage() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::getBillingPackage
     */
    public function testGetBillingPackage()
    {
        $billingPackage = new Package();
        $billingPackage->setDimensionUnitOfMeasure( 'in' );
        $billingPackage->setWidth( 12 );
        $billingPackage->setLength( 12 );
        $billingPackage->setHeight( 1 );
        $billingPackage->setWeightUnitOfMeasure( 'lb' );
        $billingPackage->setWeight( 3 );

        $this->assertNotNull( $this->object->getBillingPackage() );
        $this->assertEquals( $billingPackage, $this->object->getBillingPackage() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::addCharge
     */
    public function testAddCharge()
    {
        $totalCharge = new TotalCharge();
        $totalCharge->setCurrencyCode( 'USD' );
        $totalCharge->setValue( 16.56 );
        $this->object->addCharge( $totalCharge );

        $this->assertNotNull( $this->object->getCharges() );
        $this->assertCount( 3, $this->object->getCharges() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::setCharges
     */
    public function testSetCharges()
    {
        $totalCharge = new TotalCharge();
        $totalCharge->setCurrencyCode( 'USD' );
        $totalCharge->setValue( 16.56 );
        $this->object->setCharges( array( $totalCharge ) );

        $this->assertNotNull( $this->object->getCharges() );
        $this->assertCount( 1, $this->object->getCharges() );
        $this->assertEquals( array( $totalCharge ), $this->object->getCharges() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::getCharges
     */
    public function testGetCharges()
    {
        $this->assertNotNull( $this->object->getCharges() );
        $this->assertCount( 2, $this->object->getCharges() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::setDeliveryGuarantee
     */
    public function testSetDeliveryGuarantee()
    {
        $deliveryGuarantee = new DeliveryGuarantee();
        $deliveryGuarantee->setBusinessDaysInTransit( 2 );
        $deliveryGuarantee->setDeliveryDay( 'Wednesday' );
        $deliveryGuarantee->setDeliveryTime( '09:30 AM' );
        $this->object->setDeliveryGuarantee( $deliveryGuarantee );

        $this->assertNotNull( $this->object->getDeliveryGuarantee() );
        $this->assertEquals( $deliveryGuarantee, $this->object->getDeliveryGuarantee() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::getDeliveryGuarantee
     */
    public function testGetDeliveryGuarantee()
    {
        $deliveryGuarantee = new DeliveryGuarantee();
        $deliveryGuarantee->setBusinessDaysInTransit( 5 );
        $deliveryGuarantee->setDeliveryDay( 'MON' );
        $deliveryGuarantee->setDeliveryTime( '09:30 AM' );

        $this->assertNotNull( $this->object->getDeliveryGuarantee() );
        $this->assertEquals( $deliveryGuarantee, $this->object->getDeliveryGuarantee() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::addRatedPackage
     */
    public function testAddRatedPackage()
    {
        $ratedPackage = new RatedPackage();
        $ratedPackage->setWidth( 20 );
        $ratedPackage->setLength( 20 );
        $ratedPackage->setHeight( 3 );
        $ratedPackage->setWeightUnitOfMeasure( 'lb' );
        $ratedPackage->setWeight( 6 );
        $this->object->addRatedPackage( $ratedPackage );

        $this->assertNotNull( $this->object->getRatedPackages() );
        $this->assertCount( 2, $this->object->getRatedPackages() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::setRatedPackages
     */
    public function testSetRatedPackages()
    {
        $ratedPackage = new RatedPackage();
        $ratedPackage->setWidth( 20 );
        $ratedPackage->setLength( 20 );
        $ratedPackage->setHeight( 3 );
        $ratedPackage->setWeightUnitOfMeasure( 'lb' );
        $ratedPackage->setWeight( 6 );
        $this->object->setRatedPackages( array( $ratedPackage ) );

        $this->assertNotNull( $this->object->getRatedPackages() );
        $this->assertEquals( array( $ratedPackage ), $this->object->getRatedPackages() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::getRatedPackages
     */
    public function testGetRatedPackages()
    {
        $ratedPackage = new RatedPackage();
        $ratedPackage->setWidth( 16 );
        $ratedPackage->setLength( 16 );
        $ratedPackage->setHeight( 3 );
        $ratedPackage->setWeightUnitOfMeasure( 'lb' );
        $ratedPackage->setWeight( 6 );

        $this->assertNotNull( $this->object->getRatedPackages() );
        $this->assertEquals( array( $ratedPackage ), $this->object->getRatedPackages() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::addNote
     */
    public function testAddNote()
    {
        $note = new Note();
        $note->setCode( 'SUCCESS' );
        $note->setDescription( 'Test a note' );
        $this->object->addNote( $note );

        $this->assertNotNull( $this->object->getNotes() );
        $this->assertCount( 2, $this->object->getNotes() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::setNotes
     */
    public function testSetNotes()
    {
        $note = new Note();
        $note->setCode( 'ERROR' );
        $note->setDescription( 'Request was not successful' );
        $this->object->setNotes( array( $note ) );

        $this->assertNotNull( $this->object->getNotes() );
        $this->assertEquals( array( $note ), $this->object->getNotes() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Rate::getNotes
     */
    public function testGetNotes()
    {
        $note = new Note();
        $note->setCode( 'SUCCESS' );
        $note->setDescription( 'Request was successful' );

        $this->assertNotNull( $this->object->getNotes() );
        $this->assertEquals( array( $note ), $this->object->getNotes() );
    }
}

?>
<?php

/*
 * This file is part of the MultiShip package.
 *
 * (c) 2013 Fraser Reed
 *      <fraser.reed@gmail.com>
 *      github.com/fraserreed
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace MultiShip\Tests\Response\Elements;


use MultiShip\Tests\BaseTestCase;

use MultiShip\Response\Elements\Shipment;

use MultiShip\Package\Package;
use MultiShip\Package\ShipmentPackage;

use MultiShip\Charge\TotalCharge;
use MultiShip\Charge\TransportationCharge;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-15 at 10:22:52.
 *
 * @covers MultiShip\Response\Elements\Shipment
 */
class ShipmentTest extends BaseTestCase
{
    /**
     * @var Shipment
     */
    protected $object;

    protected function setUp()
    {
        $this->object = new Shipment();
        $this->object->setCarrierCode( 'FedEx' );
        $this->object->setTrackingNumber( '1Z9023492034' );
        $this->object->setServiceCode( 'FEDEX_EXPRESS_SAVER' );
        $this->object->setServiceDescription( 'FedEx Express Saver' );
        $this->object->setTotal( 100.99 );

        $billingPackage = new Package();
        $billingPackage->setDimensionUnitOfMeasure( 'in' );
        $billingPackage->setWidth( 12 );
        $billingPackage->setLength( 12 );
        $billingPackage->setHeight( 1 );
        $billingPackage->setWeightUnitOfMeasure( 'lb' );
        $billingPackage->setWeight( 3 );
        $this->object->setBillingPackage( $billingPackage );

        $totalCharge = new TotalCharge();
        $totalCharge->setCurrencyCode( 'USD' );
        $totalCharge->setValue( 100.99 );

        $shipmentPackage = new ShipmentPackage();
        $shipmentPackage->setTrackingNumber( '1Z9023492034' );
        $shipmentPackage->addCharge( $totalCharge );
        $this->object->setShipmentPackage( $shipmentPackage );

        $transportationCharge = new TransportationCharge();
        $transportationCharge->setCurrencyCode( 'USD' );
        $transportationCharge->setValue( 16.56 );
        $this->object->setCharges( array( $transportationCharge ) );

        $this->object->setPackageType( 'YOUR_PACKAGING' );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::setCarrierCode
     */
    public function testSetCarrierCode()
    {
        $this->object->setCarrierCode( 'UPS' );

        $this->assertNotNull( $this->object->getCarrierCode() );
        $this->assertEquals( 'UPS', $this->object->getCarrierCode() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::getCarrierCode
     */
    public function testGetCarrierCode()
    {
        $this->assertNotNull( $this->object->getCarrierCode() );
        $this->assertEquals( 'FedEx', $this->object->getCarrierCode() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::setTrackingNumber
     */
    public function testSetTrackingNumber()
    {
        $this->object->setTrackingNumber( '1231278971231' );

        $this->assertNotNull( $this->object->getTrackingNumber() );
        $this->assertEquals( '1231278971231', $this->object->getTrackingNumber() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::getTrackingNumber
     */
    public function testGetTrackingNumber()
    {
        $this->assertNotNull( $this->object->getTrackingNumber() );
        $this->assertEquals( '1Z9023492034', $this->object->getTrackingNumber() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::setServiceCode
     */
    public function testSetServiceCode()
    {
        $this->object->setServiceCode( 'FEDEX_NEXT_DAY_AIR' );

        $this->assertNotNull( $this->object->getServiceCode() );
        $this->assertEquals( 'FEDEX_NEXT_DAY_AIR', $this->object->getServiceCode() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::getServiceCode
     */
    public function testGetServiceCode()
    {
        $this->assertNotNull( $this->object->getServiceCode() );
        $this->assertEquals( 'FEDEX_EXPRESS_SAVER', $this->object->getServiceCode() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::setServiceDescription
     */
    public function testSetServiceDescription()
    {
        $this->object->setServiceDescription( 'FedEx Next Day Air' );

        $this->assertNotNull( $this->object->getServiceDescription() );
        $this->assertEquals( 'FedEx Next Day Air', $this->object->getServiceDescription() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::getServiceDescription
     */
    public function testGetServiceDescription()
    {
        $this->assertNotNull( $this->object->getServiceDescription() );
        $this->assertEquals( 'FedEx Express Saver', $this->object->getServiceDescription() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::setTotal
     */
    public function testSetTotal()
    {
        $this->object->setTotal( 55.68 );

        $this->assertNotNull( $this->object->getTotal() );
        $this->assertEquals( 55.68, $this->object->getTotal() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::getTotal
     */
    public function testGetTotal()
    {
        $this->assertNotNull( $this->object->getTotal() );
        $this->assertEquals( 100.99, $this->object->getTotal() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::setBillingPackage
     */
    public function testSetBillingPackage()
    {
        $billingPackage = new Package();
        $billingPackage->setDimensionUnitOfMeasure( 'in' );
        $billingPackage->setHeight( 14 );
        $billingPackage->setLength( 16 );
        $billingPackage->setHeight( 31 );
        $billingPackage->setWeightUnitOfMeasure( 'lb' );
        $billingPackage->setWeight( 10 );
        $this->object->setBillingPackage( $billingPackage );

        $this->assertNotNull( $this->object->getBillingPackage() );
        $this->assertEquals( $billingPackage, $this->object->getBillingPackage() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::getBillingPackage
     */
    public function testGetBillingPackage()
    {
        $billingPackage = new Package();
        $billingPackage->setDimensionUnitOfMeasure( 'in' );
        $billingPackage->setWidth( 12 );
        $billingPackage->setLength( 12 );
        $billingPackage->setHeight( 1 );
        $billingPackage->setWeightUnitOfMeasure( 'lb' );
        $billingPackage->setWeight( 3 );

        $this->assertNotNull( $this->object->getBillingPackage() );
        $this->assertEquals( $billingPackage, $this->object->getBillingPackage() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::setShipmentPackage
     */
    public function testSetShipmentPackage()
    {
        $shipmentPackage = new ShipmentPackage();
        $shipmentPackage->setTrackingNumber( '1Z8903829034' );
        $shipmentPackage->setDimensionUnitOfMeasure( 'in' );
        $shipmentPackage->setHeight( 14 );
        $shipmentPackage->setLength( 16 );
        $shipmentPackage->setHeight( 31 );
        $shipmentPackage->setWeightUnitOfMeasure( 'lb' );
        $shipmentPackage->setWeight( 10 );
        $this->object->setShipmentPackage( $shipmentPackage );

        $this->assertNotNull( $this->object->getShipmentPackage() );
        $this->assertEquals( $shipmentPackage, $this->object->getShipmentPackage() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::getShipmentPackage
     */
    public function testGetShipmentPackage()
    {
        $totalCharge = new TotalCharge();
        $totalCharge->setCurrencyCode( 'USD' );
        $totalCharge->setValue( 100.99 );

        $shipmentPackage = new ShipmentPackage();
        $shipmentPackage->setTrackingNumber( '1Z9023492034' );
        $shipmentPackage->addCharge( $totalCharge );

        $this->assertNotNull( $this->object->getShipmentPackage() );
        $this->assertEquals( $shipmentPackage, $this->object->getShipmentPackage() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::addCharge
     */
    public function testAddCharge()
    {
        $totalCharge = new TotalCharge();
        $totalCharge->setCurrencyCode( 'USD' );
        $totalCharge->setValue( 16.56 );
        $this->object->addCharge( $totalCharge );

        $this->assertNotNull( $this->object->getCharges() );
        $this->assertCount( 2, $this->object->getCharges() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::setCharges
     */
    public function testSetCharges()
    {
        $totalCharge = new TotalCharge();
        $totalCharge->setCurrencyCode( 'USD' );
        $totalCharge->setValue( 16.56 );
        $this->object->setCharges( array( $totalCharge ) );

        $this->assertNotNull( $this->object->getCharges() );
        $this->assertCount( 1, $this->object->getCharges() );
        $this->assertEquals( array( $totalCharge ), $this->object->getCharges() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::getCharges
     */
    public function testGetCharges()
    {
        $this->assertNotNull( $this->object->getCharges() );
        $this->assertCount( 1, $this->object->getCharges() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::setPackageType
     */
    public function testSetPackageType()
    {
        $this->object->setPackageType( 'BUBBLE_MAILER' );

        $this->assertNotNull( $this->object->getPackageType() );
        $this->assertEquals( 'BUBBLE_MAILER', $this->object->getPackageType() );
    }

    /**
     * @covers \MultiShip\Response\Elements\Shipment::getPackageType
     */
    public function testGetPackageType()
    {
        $this->assertNotNull( $this->object->getPackageType() );
        $this->assertEquals( 'YOUR_PACKAGING', $this->object->getPackageType() );
    }
}

?>